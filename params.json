{"name":"Cage","body":"What Is It?\r\n-----------\r\n\r\nOne of my favorite utilities for testing my APIs is [Rack::Test][2]. However, it gets really offended if you try to use it in an interactive session. I ended up using [Faraday][3] and hacked together a set of scripts that made interacting with my APIs easy and fun. I've re-written, cleaned up, and expanded upon these scripts and the result is Cage, a [Pry][6]-based console which implements a Rack::Test-like internal Ruby DSL. If you don't like the name, I'm open to suggestions. :D\r\n\r\nWhat Can It Do?\r\n---------------\r\n\r\n**Short Answer**: Anything [Faraday][3] can do, Cage can do. However, I am attempting to make it natural and easy to use in an interactive manner.\r\n\r\nBy default, the HTTP verbs `get`, `post`, `put`, `delete`, `patch`, and `options` are available and if you prefer you can use them in SHOUTCASE in order to feel special about it. Each of these will return a Cage::Response, which is a thin wrapper around a Faraday::Response that facilitates prettier printing.\r\n\r\nCage will also keep track of where you're at so you don't have to keep entering the fully-qualified domain name or any prefixes common to all your requests.\r\n\r\nFor example, if you want to hit version one of the [Rubygems.org](http://rubygems.org) API just set the domain and prefix.\r\n\r\n```\r\n└─> bundle exec cage\r\n[rubygems.org:]-> set :scheme, :http\r\n=> :http\r\n[rubygems.org:]-> set :domain, \"rubygems.org\"\r\n=> \"rubygems.org\"\r\n[rubygems.org:]-> set :prefix, \"api/v1/gems\"\r\n=> \"api/v1/gems\"\r\n[rubygems.org:]-> get \"rails.json\"\r\n=>\r\nStatus: 200\r\n\r\nHeaders:\r\n  date: Sat, 28 Jan 2012 06:57:49 GMT\r\n  server: Apache/2.2.3 (Red Hat) mod_ssl/2.2.3 OpenSSL/0.9.8e-fips-rhel5 Phusion_Passenger/3.0.11\r\n  x-powered-by: Phusion Passenger (mod_rails/mod_rack) 3.0.11\r\n  etag: \"6bc2525a176ae07870d12b35d6c78dcf\"\r\n  cache-control: max-age=0, private, must-revalidate\r\n  x-ua-compatible: IE=Edge,chrome=1\r\n  x-runtime: 0.025598\r\n  status: 200\r\n  content-length: 1096\r\n  connection: close\r\n  content-type: application/json; charset=utf-8\r\n\r\nBody:\r\n  {\"name\"=>\"rails\", \"downloads\"=>7422057, \"version\"=>\"3.2.1\", .... }\r\n\r\n#<Cage::Response:(http://rubygems.org/api/v1/gems/rails.json)>\r\n\r\n[rubygems.org:200]-> get \"rails.xml\"\r\n=>\r\nStatus: 200\r\n\r\nHeaders:\r\n  date: Sat, 28 Jan 2012 06:57:53 GMT\r\n  server: Apache/2.2.3 (Red Hat) mod_ssl/2.2.3 OpenSSL/0.9.8e-fips-rhel5 Phusion_Passenger/3.0.11\r\n  x-powered-by: Phusion Passenger (mod_rails/mod_rack) 3.0.11\r\n  etag: \"fd13fd2f31fa180391b2e9a9b3c08b79\"\r\n  cache-control: max-age=0, private, must-revalidate\r\n  x-ua-compatible: IE=Edge,chrome=1\r\n  x-runtime: 0.034550\r\n  status: 200\r\n  content-length: 1915\r\n  connection: close\r\n  content-type: application/xml; charset=utf-8\r\n\r\nBody:\r\n  {\"rubygem\"=>{\"name\"=>\"rails\", \"downloads\"=>7422057, \"version\"=>\"3.2.1\", ... }\r\n\r\n#<Cage::Response:(http://rubygems.org/api/v1/gems/rails.xml)>\r\n\r\n[rubygems.org:200]-> get \"wontbethere\"\r\n=>\r\nStatus: 404\r\n\r\nHeaders:\r\n  date: Sat, 28 Jan 2012 07:43:53 GMT\r\n  server: Apache/2.2.3 (Red Hat) mod_ssl/2.2.3 OpenSSL/0.9.8e-fips-rhel5 Phus\r\n  x-powered-by: Phusion Passenger (mod_rails/mod_rack) 3.0.11\r\n  cache-control: no-cache\r\n  x-ua-compatible: IE=Edge,chrome=1\r\n  x-runtime: 0.011617\r\n  status: 404\r\n  vary: Accept-Encoding\r\n  content-length: 1053\r\n  connection: close\r\n  content-type: text/html; charset=utf-8\r\n\r\nBody:\r\n  <!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n\r\n```\r\n\r\nCurrently, Cage is attempting to remain feature reduced and free of opinions.  I have attempted to include  of all elements of the Rack::Test DSL that I wish I'd had when hand-testing my APIs or investigating new ones. If there's something you wish Cage did that is not currently available. Please do [File an issue](https://github.com/nuclearsandwich/cage/issues/new) and I will do my best to accommodate your request.\r\n\r\nGetting It\r\n----------\r\n\r\n```ruby\r\ngroup :development do\r\n  gem \"cage\"\r\nend\r\n```\r\n\r\nUsing It\r\n--------\r\n\r\nRunning `cage` will begin a console session. Cage is like a specialized IRB, but for HTTP interactions. Imagine that you are working on an API. [Rack::Test][2] is an awesome tool but when you try to use it interactively you get an interesting display of fireworks(read: stacktraces). Cage is based on a utility script I wrote while working on a REST API. Some days, you just want to monkey around with your work.\r\n\r\nWhen you run Cage, you're dropped into a special Pry terminal with HTTP related commands available.\r\n\r\n### Available Commands ###\r\n\r\n- HTTP Methods:\r\n  - `GET`/`get`: url, params, headers\r\n  - `HEAD`/`head`: url, params, headers\r\n  - `DELETE`/`delete`: url, params, headers\r\n  - `POST`/`post`: url, body, headers\r\n  - `PUT`/`put`: url, body, headers\r\n  - `PATCH`/`patch`: url, body, headers\r\n\r\n- Cage Methods for Requests\r\n  - `basic_auth`: login, pass\r\n  - `token_auth`: token, options\r\n  - `add_middleware`: middleware_builder_block\r\n\r\n- Anything else Ruby can do...\r\n\r\nConfiguring It\r\n--------------\r\n\r\n***NOTE*** Global Configs aren't supported yet. Local configs and specified configs are working.\r\n\r\nCage will look first for a global `~/.cagerc.rb` file, then for a local `./cagerc.rb` in the working directory. Both are essentially instance_eval'd into your new Cage console so anything that works in Cage will work in a config.  The global one is run first, so you can overload it with a local config. The local config is for setting up project defaults, you can even automate your initial authentication if you want.\r\n\r\nRoadmap\r\n-------\r\n\r\n- 0.1.3 Global config specified in `~/.cagerc.rb`\r\n\r\n- 0.2.0 Write tests for whatever I can. WIP Study Pry's tests and read up on\r\n  testing apps like this in [Build Awesome Command-Line Applications in Ruby][5]\r\n\r\n- 0.3.0 Make it easier to send XML, YAML, and JSON formatted bodies.\r\n\r\n- 0.4.0 Make some decisions about Auth.\r\n\r\n[1]: http://identi.ca/notice/89369056\r\n[2]: https://github.com/brynary/rack-test\r\n[3]: https://github.com/technoweenie/faraday\r\n[4]: https://github.com/pengwynn/faraday_middleware\r\n[5]: http://pragprog.com/book/dccar/build-awesome-command-line-applications-in-ruby\r\n[6]: http://pry.github.com\r\n\r\n","tagline":"A Faraday Cage for your HTTP Interactions.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}